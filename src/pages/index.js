import { useEffect, useState, useCallback } from "react";

import Head from "next/head";
import NavBar from "@/components/NavBar";
import AlbumList from "@/components/AlbumList";
import MusicPlayer from "@/components/MusicPlayer";
import Subscribe from "@/components/Subscribe";
import SignIn from "@/components/SignIn";
import AddMusic from "@/components/AddMusic";

import styles from "@/styles/Home.module.css";
import modalStyles from "@/styles/Modal.module.css";

import { Noto_Sans_JP } from "next/font/google";

const notoSansJP = Noto_Sans_JP({
  subsets: ["latin"],
  weight: ["100", "400", "700", "900"],
  display: "swap",
});

import { Amplify } from "aws-amplify";
import config from "../amplifyconfiguration.json";
Amplify.configure(config);

export default function Home() {
  const ARTIST = "artist";
  const FAN = "fan";
  const [user, setUser] = useState(null);
  const [groups, setGroups] = useState([]);
  const [albums, setAlbums] = useState([]);
  const [songs, setSongs] = useState([]);
  const [albumsStatusMessage, setAlbumsStatusMessage] =
    useState("Loading albums...");
  const [songsStatusMessage, setSongsStatusMessage] =
    useState("Loading songs...");
  const [showModal, setShowModal] = useState(false);

  const canShowModal = showModal && !user;

  const fetchSongs = async (albumId) => {
    try {
      const response = await fetch(`/api/songs?albumId=${albumId}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const fetchedSongs = await response.json();

      if (fetchedSongs.length > 0) {
        setSongs(fetchedSongs);
      } else {
        setSongsStatusMessage("No songs found.");
      }
    } catch (error) {
      console.error("Failed to fetch songs:", error);
      setSongsStatusMessage("Error loading songs. Is the backend running?");
    }
  };

  useEffect(() => {
    const fetchAlbums = async () => {
      try {
        const response = await fetch("/api/albums");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const fetchedAlbums = await response.json();
        if (fetchedAlbums.length > 0) {
          setAlbums(fetchedAlbums);
        } else {
          setAlbumsStatusMessage("No albums found.");
        }
      } catch (error) {
        console.error("Failed to fetch albums:", error);
        setAlbumsStatusMessage("Error loading albums. Is the backend running?");
      }
    };

    if (user) fetchAlbums();
  }, [user]);

  const closeModal = useCallback(() => {
    setShowModal(false);
  }, []);
  return (
    <>
      <Head>
        <title>OG</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={`${styles.page} ${notoSansJP.className}`}>
        <NavBar
          user={user}
          setUser={() => setUser(null)}
          doShowModal={() => setShowModal(true)}
        />
        <main className={styles.main}>
          {user && groups.includes(ARTIST) && <AddMusic />}
          {user ? (
            <AlbumList
              albums={albums}
              albumsStatusMessage={albumsStatusMessage}
              doFetchSongs={fetchSongs}
            />
          ) : (
            ""
          )}
          {canShowModal && (
            <div className={modalStyles.modalOverlay}>
              <div className={modalStyles.modalContent}>
                <span className={modalStyles.closeButton} onClick={closeModal}>
                  &times;
                </span>
                {!user && <SignIn setUser={setUser} setGroups={setGroups} />}
                {!user && <Subscribe />}
              </div>
            </div>
          )}
        </main>

        <footer className={styles.footer}>
          {user ? (
            <MusicPlayer
              songs={songs}
              songsStatusMessage={songsStatusMessage}
            />
          ) : (
            ""
          )}
        </footer>
      </div>
    </>
  );
}
